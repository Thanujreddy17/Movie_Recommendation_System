{"cells":[{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","execution_count":null,"outputs":[]},{"metadata":{"_uuid":"d629ff2d2480ee46fbb7e2d37f6b5fab8052498a","_cell_guid":"79c7e3d0-c299-4dcb-8224-4455121ee9b0","trusted":true},"cell_type":"code","source":"#additional imports\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom pathlib import Path\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import classification_report,confusion_matrix\nfrom sklearn.svm import LinearSVC\nfrom sklearn.svm  import SVC\n","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"path = Path('/kaggle/input/heart-disease-uci/heart.csv')","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"Loading dataframe and checking what types of data we have"},{"metadata":{"trusted":true},"cell_type":"code","source":"df = pd.read_csv(path)\ndf.head()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"looks like everything is numerical , once again we can re-check it with pandas .info() method"},{"metadata":{"trusted":true},"cell_type":"code","source":"df.info()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We also need to find null\\NaN values"},{"metadata":{"trusted":true},"cell_type":"code","source":"df.isnull().sum()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"df.isna().sum()","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We don't need to preprocess text data and fill empty cells. Now we can visualize dataframe to get the idea how features relate to each other."},{"metadata":{},"cell_type":"markdown","source":"**Data visualization**"},{"metadata":{"trusted":true},"cell_type":"code","source":"correlation = df.corr()\nplt.figure(1,figsize = (11,11))\nsns.heatmap(correlation,annot=True,cmap=\"YlGnBu\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#gender distribution\n#1 for a male, and 0 for a female\nsns.countplot(x = 'sex', data = df,palette=\"Set3\")","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"#age distribution\nsns.distplot(df['age'] , bins = 20)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"markdown","source":"rate is spiking after 40 y\\o\n\ncp is chest pain rate. and it's highly related to heart desease according to our correlation matrix. let's get plot representation"},{"metadata":{"trusted":true},"cell_type":"code","source":"# cp is chest pain rate. \nfig = plt.figure()\nax = fig.add_subplot(111)\nscatter = ax.scatter(df['cp'],df['age'],c=df.target)\nax.set_title(\"age and chest pain distribution\")\nax.set_xlabel('chest pain')\nax.set_ylabel('age')\nplt.colorbar(scatter)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"markdown","source":"age 40 and older tend to have chest pain without actual heart desease. And it's almost impossible to have a heart desease without pain.\n\nMaximum heart rate (thalach) and ST segment(slope) are highly related to desease.\n\nlet's plot"},{"metadata":{"trusted":true},"cell_type":"code","source":"sns.pairplot(df[['age','thalach','slope','target']],hue='target',size=5)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"it's tempting to use desicion tree and random forest classifier , but since it's binary classification - most models should have similar performance . I've decided to stick SVC this time"},{"metadata":{},"cell_type":"markdown","source":"**feature scaling**"},{"metadata":{"trusted":true},"cell_type":"code","source":"scaler = StandardScaler()\ndf.shape","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"X = scaler.fit_transform(df.drop(['target'],axis=1))\ny = df.target\nX.shape,y.shape","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"train \\ test split"},{"metadata":{"trusted":true},"cell_type":"code","source":"X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.2, random_state = 0)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"We should try Linear SVC first"},{"metadata":{"trusted":true},"cell_type":"code","source":"Lsvcmodel = LinearSVC()\nLsvcmodel.fit(X_train,y_train)\nLsvcmodel.score(X_test,y_test)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"before trying other models, i would search for a hyperparameters tuning"},{"metadata":{"trusted":true},"cell_type":"code","source":"params = {'C' : [0.01,0.1,0.25,0.5,0.75,1,10,100],\n         'gamma' : [1,0.75,0.5,0.25,0.1,0.01,0.001],\n         'kernel': ['rbf','poly','linear']}","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"gridsearch = GridSearchCV(SVC(),params,refit=True)\ngridsearch.fit(X_train,y_train)","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"gridsearch.best_params_","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"**creating final model**"},{"metadata":{"trusted":true},"cell_type":"code","source":"Lmodel = SVC(kernel='linear', gamma=1, C=0.01)\nLmodel.fit(X_train,y_train)\nLmodel.score(X_test,y_test)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"confusion matrix and classification report"},{"metadata":{"trusted":true},"cell_type":"code","source":"test_pred = Lmodel.predict(X_test)\ncm = confusion_matrix(y_test,test_pred)\ncm","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"print(classification_report(y_test,test_pred))","execution_count":null,"outputs":[]}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}